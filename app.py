from habanero import Crossref
import pandas as pd

# Mapping of DOI prefixes to publisher types
PUBLISHER_TYPES = {
    "10.1109": "IEEE",
    "10.1016": "Elsevier",
    "10.1145": "ACM Digital Library",
    "10.1007": "Springer",
    "10.1080": "Taylor & Francis",
    "10.1038": "Nature",
    "10.1021": "ACS Publications",
    "10.1177": "SAGE Journals",
    "10.1093": "Oxford University Press",
    "10.3390": "MDPI",
    "10.1049": "IET Digital Library",
    "10.1117": "SPIE Digital Library",
    # Add more mappings as needed
}

# Function to get publisher type based on DOI
def get_publisher_type(doi):
    prefix = doi.split("/")[0]
    return PUBLISHER_TYPES.get(prefix, "Other/Unknown")

# Initialize CrossRef client
cr = Crossref()

# List of DOIs
dois = [
    "10.1007/s10489-020-01829-7",  
    "10.3390/healthcare8040518",
    "10.1016/j.patrec.2020.09.010",
    "10.3390/bioengineering10111314",
    "10.3390/make2040027",
    "10.3390/healthcare10060987",
    "10.48550/ARXIV.2301.08479",
    "10.1007/978-3-030-99457-0_18",
    "10.21203/rs.3.rs-2220817/v1",
    "10.1101/2020.04.24.20078584",
    "10.1109/issi55442.2022.9963223",
    "10.1007/978-3-031-60884-1_14",
    "10.1016/j.ibmed.2024.100190",
    "10.1007/s13246-020-00865-4",
    "10.1016/j.compbiomed.2020.103795",
    "10.48550/arXiv.1811.12789",
    "10.1109/access.2020.3044858",
    "10.22114/ajem.v4i2s.451",
    "10.1007/s11042-023-15389-8",
    "10.1007/978-3-642-20633-7_10",
    "10.1109/access.2020.3025164",
    "10.1016/j.patrec.2021.11.020",
    "10.3390/diagnostics11081480",
    "10.1007/s00521-022-07052-4",
    "10.1007/s10140-021-01905-6",
    "10.1016/j.eswa.2020.113909",
    "10.53730/ijhs.v6ns1.7541",
    "10.1145/3608298.3608299",
    "10.1007/s10522-021-09946-7",
    "10.3390/app10020559",
    "10.1109/ICCVW.2019.00110",
    "10.11591/ijeecs.v24.i3.pp1469-1480",
    "10.1136/jim-2018-000712",
    "10.1177/2472630320962002",
    "10.17632/8H65YWD2JR.3",
    "10.32604/cmc.2022.019354",
    "10.1109/miucc55081.2022.9781796",
    "10.1007/s11042-021-10783-6",
    "10.20517/ais.2021.15",
    "10.1016/j.bspc.2022.103977",
    "10.48550/ARXIV.2003.14395",
    "10.7717/peerj-cs.614",
    "10.1155/2023/4301745",
    "10.13140/RG.2.2.29110.24647",
    "10.2196/27468",
    "10.3389/fgene.2022.980338",
    "10.48550/ARXIV.2004.02060",
    "10.1007/978-981-16-8129-5_142",
    "10.1007/s10916-021-01745-4",
    "10.1109/tmi.2020.2996256",
    "10.1007/s13721-023-00413-6",
    "10.1155/2021/9929274",
    "10.1007/s42979-021-00782-7",
    "10.3390/ijerph20021268",
    "10.48550/ARXIV.1512.03385",
    "10.48550/ARXIV.2003.11055",
    "10.2307/25148625",
    "10.1007/978-1-4419-5653-8",
    "10.1109/access.2020.2974242",
    "10.1007/s12559-020-09787-5",
    "10.5772/intechopen.72447",
    "10.1371/journal.pone.0302413",
    "10.1016/j.eswa.2020.114054",
    "10.1007/s10489-020-01902-1",
    "10.1080/07391102.2020.1788642",
    "10.1038/s41431-022-01108-8",
    "10.1109/iccict50803.2021.9509936",
    "10.47494/mesb.2021.13.658",
    "10.2478/acss-2023-0005",
    "10.17632/RSCBJBR9SJ.2",
    "10.1016/j.cell.2018.02.010",
    "10.1016/j.cmpb.2020.105581",
    "10.3390/diagnostics12020267",
    "10.1109/r10-htc54060.2022.9929517",
    "10.48550/ARXIV.1801.05968",
    "10.1049/ipr2.12893",
    "10.1145/3065386",
    "10.1371/journal.pone.0256630",
    "10.1016/j.radi.2022.09.011",
    "10.1007/s11042-022-14247-3",
    "10.1155/2021/5527923",
    "10.1155/2021/5528441",
    "10.1515/cclm-2020-0285",
    "10.1515/cclm-2020-0285",
    "10.2113/gssajg.111.2-3.229",
    "10.3390/app12136448",
    "10.1186/s41479-016-0012-z",
    "10.32604/iasc.2021.016800",
    "10.1109/melecon53508.2022.9843100",
    "10.1017/s0266462322001933",
    "10.1109/icvee50212.2020.9243290",
    "10.1016/j.media.2020.101794",
    "10.1007/s10489-020-01770-9",
    "10.1109/VRW55335.2022.00099",
    "10.35631/jistm.832008",
    "10.1117/12.2524681",
    "10.3390/ai1040032",
    "10.1016/j.irbm.2020.07.001",
    "10.1007/s10044-021-00984-y",
    "10.1016/j.compbiomed.2022.105466",
    "10.1109/tmi.2020.2995508",
    "10.1016/j.compbiomed.2020.103792",
    "10.1016/j.radi.2020.10.018",
    "10.1109/incet51464.2021.9456192",
    "10.1016/j.irbm.2020.05.003",
    "10.1007/978-3-319-60964-5_73",
    "10.48550/ARXIV.2006.02763",
    "10.1007/s13755-020-00135-3",
    "10.1002/ima.22558",
    "10.1007/s42979-021-00762-x",
    "10.22214/ijraset.2022.47",
    "10.1007/978-3-030-94507-7_2",
    "10.1007/s11420-020-09775-3",
    "10.3390/healthcare11111561",
    "10.1155/2021/6621607",
    "10.1007/978-3- 319-24574-4_28",
    "10.17632/9XKHGTS2S6.3",
    "10.7759/cureus.44130",
    "10.1177/2472630320958376",
    "10.48550/ARXIV.1610.02391",
    "10.1016/j.asoc.2021.107878",
    "10.1016/j.procs.2023.01.018",
    "10.1007/s10489-020-01862-6",
    "10.1016/j.imu.2020.100427",
    "10.48550/ARXIV.1409.1556",
    "10.1038/s41598-023-35922-x",
    "10.1155/2019/4180949",
    "10.1109/jbhi.2020.3019505",
    "10.1016/j.bbe.2022.08.001",
    "10.1109/ist55454.2022.9827673",
    "10.1038/s41746-020-0273-z",
    "10.1371/journal.pone.0285121",
    "10.1016/j.chaos.2020.110122",
    "10.1007/s10489-020-01888-w",
    "10.1016/j.mehy.2020.109761",
    "10.1016/j.aej.2023.05.036",
    "10.1109/icecct.2019.8869364",
    "10.1109/ACCESS.2020.2994762",
    "10.1007/s11517-022-02746-2",
    "10.1109/tmi.2020.2994908",
    "10.1038/s41598-020-76550-z",
    "10.1183/20734735.0087-2021",
    "10.1109/embc46164.2021.9630898",
    "10.51505/ijaemr.2022.7209",
    "10.1016/s2589-7500(21)00146-1",
    "10.1109/tnnls.2021.3070467",
    "10.1007/s11042-020-09894-3",
    "10.1007/978-3-030-91699-2_9",
    "10.5772/intechope",
    "10.5121/ijcsa.2020.10501",
    "10.1109/MIS.2015.69",
]

# Fetch metadata
data = []
for doi in dois:
    try:
        article = cr.works(ids=doi)
        message = article["message"]
        
        # Extract metadata
        metadata = {
            "DOI": doi,
            "Title": message.get("title", ["N/A"])[0],
            "Abstract": message.get("abstract", "N/A"),
            "Authors": ", ".join(
                [f"{author['family']} {author['given']}" for author in message.get("author", [])]
            ),
            "Published Year": message.get("issued", {}).get("date-parts", [[None]])[0][0],
            "Journal/Conference": message.get("container-title", ["N/A"])[0],
            "Publisher": message.get("publisher", "N/A"),
            "Publisher Type": get_publisher_type(doi),
            "Volume": message.get("volume", "N/A"),
            "Issue": message.get("issue", "N/A"),
            "Pages": message.get("page", "N/A"),
            "URL": message.get("URL", "N/A"),
            "Citations": message.get("is-referenced-by-count", 0),
        }
        data.append(metadata)
    except Exception as e:
        print(f"Error fetching data for DOI {doi}: {e}")

# Create DataFrame
df = pd.DataFrame(data)

# Save to Excel
output_file = "articles_metadata_with_publisher_type.xlsx"
df.to_excel(output_file, index=False)
print(f"Excel file created: {output_file}")
